def max(arr: @long, size: long) -> long {
   let i: long = 0
   let max: @long = arr
   while i < size {
     if @(arr+i) > @max {
        max = arr+i
     }
     i = i+1
   } 
   return @max
}

def zeroed(arr: @long, size: long) -> () {
    let i: long = 0
    while i < size {
      @(arr+i) = 0
      i = i+1
    }
}

# This creates 2D array with consecutive
# natural numbers on the diagonal.
def ptrs(n: long, j: long) -> long {
    let x: @@long = [n]
    let i: long = 0
    while i < n {
      let y: @long = [n]
      zeroed(y, n)
      @(y+i) = i+1
      @(x+i) = y
      i = i+1
    }
    return @(@(x+j)+j)
}


def main() -> long {
    let n: long = 50
    let x: @long = [n]

    zeroed(x, n)

    @(x+0) = 70
    @(x+10) = 2
    @(x+22) = 10
    @(x+33) = 89
    @(x+44) = 91
    
    return max(x, n)
}